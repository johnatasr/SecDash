{"version":3,"sources":["config.js","App/layout/Loader/index.js","hoc/_Aux/index.js","App/layout/ScrollToTop/index.js","route.js","App/index.js","serviceWorker.js","store/reducer.js","index.js","store/actions.js"],"names":["defaultPath","homePath","layout","preLayout","collapseMenu","layoutType","navIconColor","headerBackColor","navBackColor","navBrandColor","navBackImage","rtlLayout","navFixedLayout","headerFixedLayout","boxLayout","navDropdownIcon","navListIcon","navActiveListColor","navListTitleColor","navListTitleHide","configBlock","layout6Background","layout6BackSize","loader","className","Aux","props","children","ScrollToTop","prevProps","this","location","window","scrollTo","React","Component","withRouter","route","path","exact","name","component","lazy","AdminLayout","Loadable","loading","Loader","App","menu","routes","map","index","Route","key","render","fallback","Switch","Boolean","hostname","match","initialState","isOpen","isTrigger","config","isFullScreen","reducer","state","action","trigger","open","type","actionTypes","triggerIndex","indexOf","id","filter","item","store","createStore","app","BrowserRouter","basename","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","COLLAPSE_MENU","COLLAPSE_TOGGLE","FULL_SCREEN","FULL_SCREEN_EXIT","CHANGE_LAYOUT","NAV_CONTENT_LEAVE","NAV_COLLAPSE_LEAVE"],"mappings":"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","file":"js/main.b24fb810.chunk.js","sourcesContent":["export default {\r\n    defaultPath: '/auth/signin',\r\n    homePath: '/dashboard',\r\n    layout: 'vertical', \r\n    preLayout: null, \r\n    collapseMenu: false, \r\n    layoutType: 'menu-light', \r\n    navIconColor: false,\r\n    headerBackColor: 'header-default', \r\n    navBackColor: 'navbar-default', \r\n    navBrandColor: 'brand-default', \r\n    navBackImage: false, \r\n    rtlLayout: false, \r\n    navFixedLayout: true,\r\n    headerFixedLayout: false, \r\n    boxLayout: false,\r\n    navDropdownIcon: 'style1', \r\n    navListIcon: 'style1', \r\n    navActiveListColor: 'active-default', \r\n    navListTitleColor: 'title-default', \r\n    navListTitleHide: false, \r\n    configBlock: false, \r\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', \r\n    layout6BackSize : '', \r\n};\r\n","import React from 'react';\r\n\r\nconst loader = () => {\r\n    return (\r\n        <div className=\"loader-bg\">\r\n            <div className=\"loader-track\">\r\n                <div className=\"loader-fill\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default loader;","const Aux = (props) => props.children;\r\n\r\nexport default Aux;","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass ScrollToTop extends React.Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\n\r\nconst SignUp1 = React.lazy(() => import('./Demo/Authentication/SignUp/SignUp1'));\r\nconst Signin1 = React.lazy(() => import('./Demo/Authentication/SignIn/SignIn1'));\r\n\r\nconst route = [\r\n    { path: '/auth/signup', exact: true, name: 'Signup 1', component: SignUp1 },\r\n    { path: '/auth/signin', exact: true, name: 'Signin 1', component: Signin1 }\r\n];\r\n\r\nexport default route;","import React, { Component, Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\nimport '../../node_modules/font-awesome/scss/font-awesome.scss';\n\nimport Loader from './layout/Loader'\nimport Aux from \"../hoc/_Aux\";\nimport ScrollToTop from './layout/ScrollToTop';\nimport routes from \"../route\";\n\nconst AdminLayout = Loadable({\n    loader: () => import('./layout/AdminLayout'),\n    loading: Loader\n});\n\nclass App extends Component {\n    render() {\n        const menu = routes.map((route, index) => {\n          return (route.component) ? (\n              <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => (\n                      <route.component {...props} />\n                  )} />\n          ) : (null);\n        });\n\n        return (\n            <Aux>\n                <ScrollToTop>\n                    <Suspense fallback={<Loader/>}>\n                        <Switch>\n                            {menu}\n                            <Route path=\"/\" component={AdminLayout} />\n                        </Switch>\n                    </Suspense>\n                </ScrollToTop>\n            </Aux>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\r\nimport config from './../config';\r\n\r\nconst initialState = {\r\n    isOpen: [], //for active default menu\r\n    isTrigger: [], //for active default menu, set blank for horizontal\r\n    ...config,\r\n    isFullScreen: false, // static can't change\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let trigger = [];\r\n    let open = [];\r\n\r\n    switch (action.type) {\r\n        case actionTypes.COLLAPSE_MENU:\r\n            return {\r\n                ...state,\r\n                collapseMenu: !state.collapseMenu\r\n            };\r\n        case actionTypes.COLLAPSE_TOGGLE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n\r\n                if (triggerIndex === -1) {\r\n                    open = [...open, action.menu.id];\r\n                    trigger = [...trigger, action.menu.id];\r\n                }\r\n            } else {\r\n                open = state.isOpen;\r\n                const triggerIndex = (state.isTrigger).indexOf(action.menu.id);\r\n                trigger = (triggerIndex === -1) ? [action.menu.id] : [];\r\n                open = (triggerIndex === -1) ? [action.menu.id] : [];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger\r\n            };\r\n        case actionTypes.NAV_CONTENT_LEAVE:\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger,\r\n            };\r\n        case actionTypes.NAV_COLLAPSE_LEAVE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n                return {\r\n                    ...state,\r\n                    isOpen: open,\r\n                    isTrigger: trigger,\r\n                };\r\n            }\r\n            return {...state};\r\n        case actionTypes.FULL_SCREEN :\r\n            return {\r\n                ...state,\r\n                isFullScreen: !state.isFullScreen\r\n            };\r\n        case actionTypes.FULL_SCREEN_EXIT:\r\n            return {\r\n                ...state,\r\n                isFullScreen: false\r\n            };\r\n        case actionTypes.CHANGE_LAYOUT:\r\n            return {\r\n                ...state,\r\n                layout: action.layout\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nimport App from './App/index';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport reducer from './store/reducer';\r\nimport config from './config';\r\n\r\nconst store = createStore(reducer);\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={config.basename}>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","export const COLLAPSE_MENU = 'COLLAPSE_MENU';\r\nexport const COLLAPSE_TOGGLE = 'COLLAPSE_TOGGLE';\r\nexport const FULL_SCREEN = 'FULL_SCREEN';\r\nexport const FULL_SCREEN_EXIT = 'FULL_SCREEN_EXIT';\r\nexport const CHANGE_LAYOUT = 'CHANGE_LAYOUT';\r\nexport const NAV_CONTENT_LEAVE = 'NAV_CONTENT_LEAVE';\r\nexport const NAV_COLLAPSE_LEAVE = 'NAV_COLLAPSE_LEAVE';"],"sourceRoot":""}